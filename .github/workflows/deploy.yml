name: Deploy Datasette

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'docker/**'
      - 'data/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.2.2'
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Setup Babashka
        uses: turtlequeue/setup-babashka@v1.5.2
        with:
          babashka-version: 1.3.186
      - name: Cache db
        id: cache-db
        uses: actions/cache@v3
        with:
          path: ./data/data.db
          key: cache-${{ hashFiles('input/**') }}-${{ hashFiles('scripts/**') }}
      - name: Generate db
        run: bb --main scripts.build-db

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sg-law-archive-data
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/prod.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV


#      - name: Deploy image to Amazon EKS
#        env:
#          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#          KUBE_NAMESPACE: dev
#          KUBE_DEPLOYMENT: sg-law-archive-data
#          KUBE_IMAGE: ${{ steps.build-image.outputs.image }}
#        run: |
#          echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yml
#          kubectl --kubeconfig=kubeconfig.yml -n $KUBE_NAMESPACE set image deployment/$KUBE_DEPLOYMENT $KUBE_DEPLOYMENT=$KUBE_IMAGE
